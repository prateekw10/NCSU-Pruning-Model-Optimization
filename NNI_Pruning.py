# -*- coding: utf-8 -*-
"""MNIST_TWIST_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ardkOv22opNqbYIO7tDnW16nHhsx7cSv
"""

from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.optim.lr_scheduler import StepLR
import time
import torch.nn as nn

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.conv3 = nn.Conv2d(64, 128, 3, 1)
        self.conv4 = nn.Conv2d(128, 256, 3, 1)
        self.dropout1 = nn.Dropout(0.25)
        self.dropout2 = nn.Dropout(0.5)
        self.fc1 = nn.Linear(25600, 5000)
        self.fc2 = nn.Linear(5000, 512)
        self.fc3 = nn.Linear(512, 10)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = self.conv3(x)
        x = F.relu(x)
        x = self.conv4(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.dropout1(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.dropout2(x)
        x = self.fc2(x)
        x = self.dropout2(x)
        x = self.fc3(x)
        output = F.log_softmax(x, dim=1)
        return output


def train(args, model, device, train_loader, optimizer, epoch):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % args.log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))
            if args.dry_run:
                break


def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

class Config:
  batch_size = 1024
  test_batch_size = 1000
  epochs = 14
  lr = 0.1
  gamma = 0.7
  no_cuda = False 
  dry_run = False
  seed  = 200
  log_interval = 10
  save_model = True
  pruned_path = ''
  pruned = False

def main(args):
    
    use_cuda = not args.no_cuda and torch.cuda.is_available()

    torch.manual_seed(args.seed)

    device = torch.device("cuda" if use_cuda else "cpu")

    train_kwargs = {'batch_size': args.batch_size}
    test_kwargs = {'batch_size': args.test_batch_size}
    if use_cuda:
        cuda_kwargs = {'num_workers': 1,
                       'pin_memory': True,
                       'shuffle': True}
        train_kwargs.update(cuda_kwargs)
        test_kwargs.update(cuda_kwargs)

    transform=transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.1307,), (0.3081,))
        ])
    dataset1 = datasets.MNIST('../data', train=True, download=True,
                       transform=transform)
    dataset2 = datasets.MNIST('../data', train=False,
                       transform=transform)
    train_loader = torch.utils.data.DataLoader(dataset1,**train_kwargs)
    test_loader = torch.utils.data.DataLoader(dataset2, **test_kwargs)
    if args.pruned :
      print('Loading Pruned Model')
      model = torch.load(args.pruned_path)
      print(model)
    else:
      print('Loading non Pruned Model')
      model = Net().to(device)
      print(model)
    optimizer = optim.Adadelta(model.parameters(), lr=args.lr)

    scheduler = StepLR(optimizer, step_size=1, gamma=args.gamma)
    for epoch in range(1, args.epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch)
        test(model, device, test_loader)
        scheduler.step()
    if args.pruned and args.save_model:
      torch.save(model, args.pruned_path)
    if not args.pruned and args.save_model:
      torch.save(model, "mnist_cnn.pth")

    print(model)

class Config:
  batch_size = 256
  test_batch_size = 1000
  epochs = 14
  lr = 0.1
  gamma = 0.7
  no_cuda = False 
  dry_run = False
  seed  = 200
  log_interval = 10
  save_model = True
  pruned_path = ''
  pruned = False

args = Config()

use_cuda = not args.no_cuda and torch.cuda.is_available()

device = torch.device("cuda" if use_cuda else "cpu")

device

start_time = time.time()
main(args)
end_time = time.time()
print('Time to train the Actual Model',end_time - start_time)

from nni.compression.pytorch.pruning import L1NormPruner,FPGMPruner
from nni.compression.pytorch.speedup import ModelSpeedup

def model_pruning(pruner_method, config, checkpoint):
  #Load original model
  model = torch.load("mnist_cnn.pth")

  pruner = pruner_method(model, config)

  _, masks = pruner.compress()

  for name, mask in masks.items():
    print(name, ' sparsity : ', '{:.2}'.format(mask['weight'].sum() / mask['weight'].numel()))

  # need to unwrap the model, if the model is wrapped before speedup
  pruner._unwrap_model()
  # speedup the model, for more information about speedup, please refer :doc:`pruning_speedup`.

  ModelSpeedup(model, torch.rand(32,1 , 28, 28).to('cuda'), masks).speedup_model()

  print(model)
  torch.save(model, checkpoint)

# Defining Pruning Configuragtions

config_list_1 = [{
    'sparsity_per_layer': 0.5,
    'op_types': ['Linear', 'Conv2d']
}, {
    'exclude': True,
    'op_names': ['fc2']
}]

config_list_2 = [{
    'sparsity_per_layer': 0.75,
    'op_types': ['Conv2d']
}, {
    'exclude': True,
    'op_names': ['fc2']
}]

model = torch.load("mnist_cnn.pth")
print(model)

# Calling functions for each pruning method and configuration combination

model_pruning(L1NormPruner, config_list_1, 'l1_pruner_config_1.pth')
args.pruned = True
args.pruned_path = 'l1_pruner_config_1.pth'
start_time = time.time()
main(args)
end_time = time.time()
print('Time to train the l1_pruner_config_1 Model',end_time - start_time)

model_pruning(L1NormPruner, config_list_2, 'l1_pruner_config_2.pth')
args.pruned = True
args.pruned_path = 'l1_pruner_config_2.pth'
start_time = time.time()
main(args)
end_time = time.time()
print('Time to train the l1_pruner_config_2 Model',end_time - start_time)

model_pruning(FPGMPruner, config_list_1, 'fpgm_pruner_config_1.pth')
args.pruned = True
args.pruned_path = 'fpgm_pruner_config_1.pth'
start_time = time.time()
main(args)
end_time = time.time()
print('Time to train the fpgm_pruner_config_1 Model',end_time - start_time)

model_pruning(FPGMPruner, config_list_2, 'fpgm_pruner_config_2.pth')
args.pruned = True
args.pruned_path = 'fpgm_pruner_config_2.pth'
start_time = time.time()
main(args)
end_time = time.time()
print('Time to train the fpgm_pruner_config_2 Model',end_time - start_time)

